# Literals
"foo"
'a'
1.0
$foo

# Infix operator expression
(1 add 1)
((1 add 1) add 1)
(1 add (1 add 1))
(1 - (1 + 1))

# Function Application
foo()
foo(1)
foo(1 2)
foo(1 2 3)
foo(1,2,3)
(foo . $bar)(1, 2, 3)

# Definition and assignment
define foo 5
set! foo 6

# Lambda expressions
lambda () end
lambda (a) end
lambda (a b) end
lambda (a b c) end

lambda ()
    foo(a)
end

lambda (a)
    foo(a)
end

lambda (a b)
    foo(a b)
end

lambda (a b c)
    foo(a b c)
end

# Begin block
begin end

begin
    foo()
end

begin
    foo()
    bar()
end

# If statement
if conditional
    if_branch
else
    else_branch
end

if conditional
    if_branch
end

## Define an infix operator (No Precedence)
#infix =
#
## Define dummy keywords (Whitespace)
#keyword ;
#
#foo = (1 + 1) ;

# Macros
macro let ( := = ) ;
    ( a := b )
        define a b

    ( a = b )
        set! a b
end

let foo := "bar" ;
let foo = 5 ;
