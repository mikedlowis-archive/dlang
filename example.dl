# Literals
"foo"
'a'
1.0
$foo

# Infix operator expression
(1 add 1)
((1 add 1) add 1)
(1 add (1 add 1))
(1 - (1 + 1))

# Function Application
foo()
foo(1)
foo(1 2)
foo(1 2 3)
(foo . $bar)(1 2 3)

# Definition and assignment
def foo 5
set foo 6

def max func(a b)
    if (False == (a > b))
        a
    #else
        b
    end
end

# If statement
if conditional
    if_branch
#else
    else_branch
end

if conditional
    if_branch
end

# Begin block
begin end

begin
    foo()
end

begin
    foo()
    bar()
end

# Lambda expressions
func () end
func (a) end
func (a b) end
func (a b c) end

func ()
    foo(a)
end

func (a)
    foo(a)
end

func (a b)
    foo(a b)
end

func (a b c)
    foo(a b c)
end

# Macro expressions
macro () end
macro (a) end
macro (a b) end
macro (a b c) end

macro ()
    foo(a)
end

macro (a)
    foo(a)
end

macro (a b)
    foo(a b)
end

macro (a b c)
    foo(a b c)
end

# Quoting Expressions
#quote( (1 + 1) )

# Syntactic Extensions
#syntax let ( := = ) ;
#    ( a := b )
#        define a b ;
#
#    ( a = b )
#        set! a b ;
#end

#let foo := "bar" ;
#let foo = 5 ;
