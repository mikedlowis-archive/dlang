#------------------------------------------------------------------------------
# Literal Definition and Usage
#------------------------------------------------------------------------------

# Nums
foo := 1
foo = 1.0
foo = 1.0e1
foo = -1
foo = -1.0
foo = -1.0e-1

# Char
foo = 'a'
foo = '\a'    # bell
foo = '\b'    # backspace
foo = '\n'    # newline
foo = '\r'    # return
foo = '\t'    # tab
foo = '\v'    # vtab
#foo = '\xFF'  # Hex Value

# String
foo = "some string"
foo = "foo \a \b \f \n \r \t \v \' \" \\ \xFF bar"
foo = "12345"[2]

# Symbol
foo = $some_symbol

# Map
foo = {
    $foo : 1 + 1,
    "stuff" : 2 + 2,
    $stuff : 2 + 2,
    $bar : 3 + 3,
}

# Setting map elements
foo["stuff"] = 3
foo.stuff = 5

# Accessing map elements
print( foo[$bar] )
print( foo["stuff"] )
print( foo.stuff )

# Vector
foo = []
foo = [1]
foo = [1,2,3]
foo = foo[1]
foo = [1,2,3,4,5][2]

# Setting Vector Elements
foo[2] = 6

# List
foo = ()
foo = (1,)
foo = (1,2,3)
foo = foo[1]
foo = (1,2,3,4,5)[2]

# Setting List Elements
foo[2] = 6

# Block
foo = { 1 + 1 }
foo = {|a| a + 1}
foo = {|a,b| a + b }
foo = foo(1,2)
foo = ({|a,b| a + b })(1,2)

#------------------------------------------------------------------------------
# Macro Definition and Usage
#------------------------------------------------------------------------------

@ if [
    (E B B) : exec_if($1, $2, $3),
    (E B)   : exec_if($1, $2),
]

if (1 < 2)
{
    print(1 + 1)
}{
    print(2 + 2)
}

if (1 == 1)
{
    print(1 + 1)
}

#------------------------------------------------------------------------------
# Delayed Evaluation
#------------------------------------------------------------------------------

@ delay [
    (E) : make_promise({ $1 })
]

@ force [
    (E) : $1()
]

foo = delay 1 + 1
foo = force foo

