#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
DLang Language Specification
\end_layout

\begin_layout Author
Michael D.
 Lowis
\end_layout

\begin_layout Date
04/25/12
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
This report describes a programming language called DLang.
 DLang is a functional programming language which borrows and builds on
 concepts from existing programming languages such as Scheme, Lisp, Python,
 and JavaScript.
 The language aims to provide the necessary tools for creating powerful
 domain specific languages.
 To this end, the core syntax of DLang aims to be as minimal as possible
 while providing the most powerful syntactic extension capabilities.
 Despite the powerful syntactic features, performance is also a major requiremen
t for DLang.
 DLang aims to have execution speeds as close to native C as possible.
\end_layout

\begin_layout Section
Data types
\end_layout

\begin_layout Standard
Like any other programming language, DLang provides a variety of built-in
 data types that the user can manipulate, combine, and build on to suit
 their needs.
 This chapter aims to describe each of the built-in data typeâ€™s implementation,
 characteristics, and usage in detail.
\end_layout

\begin_layout Subsection
Basic Types
\end_layout

\begin_layout Standard
Basic data types in DLang consist of atomic values that may be passed around,
 used in expressions, and returned as the result of expressions.
 These data types represent the simplest building blocks of DLang.
 The data types that fall into this category are: Numbers, Characters, Symbols,
 and Booleans.
\end_layout

\begin_layout Subsubsection
Numbers
\end_layout

\begin_layout Standard
Numbers in DLang consist of several subtypes: Int, Float, BigInt, BigFloat,
 and Complex.
 The Int subtype represents a standard integer data type with at least 32
 bits of precision.
 The Float subtype represents a standard floating point number type and
 is implemented with the systems double precision floating point type.
 The subtypes BigInt and BigFloat represent the same values as their Int
 and Float cousins except their precision is only limited by the available
 program memory.
 The Complex subtype represents numbers consisting of a real and imaginary
 part.
 Both the real and imaginary parts are represented internally as BigFloats.
\end_layout

\begin_layout Standard
DLang fully supports mixed arithmetic.
 When an arithmetic operator receives two numbers of differing subtypes,
 the smallest subtype is automatically expanded to the size of the larger
 subtype.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\small}"
inline false
status open

\begin_layout Plain Layout

Ints    Floats    BigInts    BigFloats    Complex
\end_layout

\begin_layout Plain Layout

1       1.0       1L         1.0L         TBD
\end_layout

\begin_layout Plain Layout

-1      -1.0      -1L        -1.0L
\end_layout

\begin_layout Plain Layout

        1.0e1                1.0e1L
\end_layout

\begin_layout Plain Layout

        1.0e-1               1.0e-1L
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Characters
\end_layout

\begin_layout Standard
DLang characters are representations of unicode code points.
 Internally they are implemented as 32 bits of data holding the value of
 a unicode code point.
\end_layout

\begin_layout Subsubsection
Symbols
\end_layout

\begin_layout Standard
Symbols in DLang are named values that evaluate to themselves.
\end_layout

\begin_layout Subsubsection
Boolean Values
\end_layout

\begin_layout Standard
Booleans are a special subtype of Integers that can only have a value of
 zero or one.
 Booleans can
\end_layout

\begin_layout Subsection
Collections
\end_layout

\begin_layout Subsubsection
Lists
\end_layout

\begin_layout Standard
Lists are implemented internally as singly linked lists.
 Each list object is a node containg a reference to the contents of that
 node and a reference to the next node in the list.
\end_layout

\begin_layout Subsubsection
Vectors
\end_layout

\begin_layout Standard
Vectors are implemented as arrays of references to data.
\end_layout

\begin_layout Subsubsection
Maps
\end_layout

\begin_layout Standard
Maps are unordered sets of key and value pairs.
\end_layout

\begin_layout Subsubsection
Strings
\end_layout

\begin_layout Standard
Strings are implemented as ordered vectors of Characters.
\end_layout

\begin_layout Subsection
Blocks
\end_layout

\begin_layout Standard
Blocks in DLang represent functions or units of execution.
 They consist of a group of expressions that may be executed together.
 Blocks may be passed arguments, assigned to variables, and passed to, or
 returned from other blocks.
\end_layout

\begin_layout Subsubsection
Definition and Usage
\end_layout

\begin_layout Standard
Block definitions consist of an opening curly brace, an optional argument
 list, a sequence of expressions, and a closing curly brace.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\small}"
inline false
status open

\begin_layout Plain Layout

# A Block that does nothing
\end_layout

\begin_layout Plain Layout

{}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# A Block that represents an add function
\end_layout

\begin_layout Plain Layout

{|a,b| a + b}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Assigning a block to a variable
\end_layout

\begin_layout Plain Layout

add := {|a,b| a + b}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Lexical Scoping
\end_layout

\begin_layout Subsubsection
Performance and Behavior
\end_layout

\begin_layout Subsection
Ports
\end_layout

\begin_layout Standard
Ports represent byte-oriented buffered input and output devices.
\end_layout

\begin_layout Section
Operations and Operators
\end_layout

\begin_layout Section
Modules
\end_layout

\begin_layout Section
Syntactic Extension
\end_layout

\begin_layout Section
Built-in Functions
\end_layout

\begin_layout Section
Built-in Macros
\end_layout

\begin_layout Section
Optimizations
\end_layout

\begin_layout Section
Formal Syntax and Semantics
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ID     := [^
\backslash
r
\backslash
n '"#
\backslash
(
\backslash
)]
\end_layout

\begin_layout Plain Layout

CHAR   := '(
\backslash
.|[^'])'
\end_layout

\begin_layout Plain Layout

SYMBOL := 
\backslash
$[^
\backslash
r
\backslash
n '"#
\backslash
(
\backslash
)]
\end_layout

\begin_layout Plain Layout

STRING := "[^
\backslash
r]*"
\end_layout

\begin_layout Plain Layout

NUMBER := -?[0-9]+(
\backslash
.[0-9]+)?(e[0-9]+)?
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Expression := CoreForm
\end_layout

\begin_layout Plain Layout

            | BasicExp
\end_layout

\begin_layout Plain Layout

            | FuncApp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CoreForm := 'define' ID Expression
\end_layout

\begin_layout Plain Layout

          | 'set!' ID Expression
\end_layout

\begin_layout Plain Layout

          | 'begin' ExpList* TERM
\end_layout

\begin_layout Plain Layout

          | 'if' Expression Expression 'else' Expression? TERM
\end_layout

\begin_layout Plain Layout

		  | 'quote' '(' Expression ')'
\end_layout

\begin_layout Plain Layout

          | 'lambda' IdList ExpList? TERM
\end_layout

\begin_layout Plain Layout

    	  | 'macro' IdList ExpList? TERM
\end_layout

\begin_layout Plain Layout

          | 'syntax' ID IdList ID ExpList TERM
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

FuncApp := BasicExp '(' ExpList ')'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BasicExp := MacroName ExpList? TERM
\end_layout

\begin_layout Plain Layout

          | '(' Expression (ID Expression)* ')'
\end_layout

\begin_layout Plain Layout

          | Literal
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Literal := ID
\end_layout

\begin_layout Plain Layout

         | CHAR
\end_layout

\begin_layout Plain Layout

         | SYMBOL
\end_layout

\begin_layout Plain Layout

         | STRING
\end_layout

\begin_layout Plain Layout

         | NUMBER
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ExpList := Expression*
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

IdList := '(' ID* ')'
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
